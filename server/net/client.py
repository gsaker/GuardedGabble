from . import data

import sys
sys.path.append(".")

class Clients:
    #This class will hold all the clients connected to the server
    #Clients can only be added or removed from this class due to the attribute being private
    #This means the code will be more reliable as the clients attribute can only be changed by the methods in this class
    def __init__(self):
        self.__clients = {}
    def addClient(self,client):
        print("New client added")
        print("UserID:",client.userID)
        self.__clients[client.userID] = client
    def removeClient(self,client):
        self.__clients.pop(client.host)
    def sendMessage(self,sendData,userID):
        print(self.__clients)
        #Checks if client exists in the dictionary, if it does then send the message
        #If not then print error message
        client = self.__clients.get(userID, None)  # Get the client or None if not found
        if client:
            client.sendMessage(sendData)
        else:
            print(f"User with userID {userID} not found.")
    def outputClients(self):
        print(self.__clients)

class Client:
    def __init__(self,socket,host,userID,clientsQueue):
        #Setting attributes
        self.socket = socket
        self.host = host
        #username is not known when the client first connects, this will be set when the client sends a request to create a new user
        self.username = ""
        self.userID = userID
        #clientsQueue is a queue object that will be used to store the clients dictionary
        self.clientsQueue = clientsQueue
    def recieveMessage(self):
        #Will run in seperate thread
        while True:
            #Keep trying to recieve data from the client
            recievedRequest = data.RecievedData(self.socket.recv(1024))
            self.handleRequest(recievedRequest)
    def sendMessage(self,sendData):
        #This method will send a completed JSON request to the server
        self.socket.send(sendData.encode())
    def handleRequest(self,recievedRequest):
        #Main handler method for when data is recieved from the client
        #This will be added to later as more request types are added
        requestType = recievedRequest.get("requestType")
        if requestType == 0:
            self.handleNewUser(recievedRequest)
        if requestType == 4:
            self.handleMessage(recievedRequest)
    def handleNewUser(self,recievedRequest):
        #Sets username attribute to recieved data and prints out information about the new user
        self.username = recievedRequest.get("username")
        print("New User Connected!")
        print("Host:",self.host)
        print("UserID:",self.userID)
        print("Username:",self.username)
        self.newUserResponse()
    def newUserResponse(self):
        #This method will send a response to the client with their userID generated by the server
        userIDResponse = data.SendData()
        userIDResponse.append("requestType",1)
        userIDResponse.append("userID",self.userID)
        self.sendMessage(userIDResponse.createJSON())
    def handleMessage(self,recievedRequest):
        #This method will forward a message to the recipient
        #This means if required this data can be stored later
        allClients = self.clientsQueue.get()
        forwardRequest = data.SendData()
        forwardRequest.append("requestType",4)
        forwardRequest.append("recipientID",recievedRequest.get("recipientID"))
        forwardRequest.append("senderID",recievedRequest.get("senderID"))
        forwardRequest.append("messageContent",recievedRequest.get("messageContent"))
        print("New message to forward to ",recievedRequest.get("recipientID"))
        allClients.sendMessage(forwardRequest.createJSON(),int(recievedRequest.get("recipientID")))
        


            

